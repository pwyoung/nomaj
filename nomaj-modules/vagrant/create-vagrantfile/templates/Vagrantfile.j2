Vagrant.require_version ">= 2.2.3"

require 'rbconfig'

{% for plugin in vagrant.global.vagrant_plugins %}
# Install plugins for the user
system "vagrant plugin install {{plugin}}" unless Vagrant.has_plugin? "{{plugin}}"
{% endfor %}

Vagrant.configure("2") do |config|

    # Set the default provider for the OS
    @os = RbConfig::CONFIG['host_os']
    case
    when @os.downcase.include?('linux')
        operating_system = 'linux'
        provider = "libvirt"
    when @os.downcase.include?('darwin')
        operating_system = 'darwin'
        provider = "virtualbox"
    else
        puts "You OS hasn't been tested yet, go add support and send a patch."
        exit
    end

{% if vagrant.global.force_provider %}
    # Force the provider
    provider = "{{ vagrant.global.force_provider }}"
{% endif %}

    # Ensure the OS-Provider combination is supported
    os_provider = operating_system + '-' + provider
    if ! ['linux-virtualbox', 'linux-libvirt', 'darwin-virtualbox'].include? os_provider
        puts "Unsupported provider: #{provider} on " + operating_system
        puts "Consider adding support and send a patch"
        exit
    end

    # Set the project_namespace
    project_namespace = "{{ project_namespace }}"

    # shorthand accessors
    pn_l = project_namespace.downcase
    pn_u = project_namespace.upcase

    # Bash variables cannot use "-", they must use _
    pn_u = pn_u.tr("-", "_")
    pn_l = pn_l.tr("-", "_")

    # Let the provider be overridden on a per-project basis by a local variable
    if ENV[pn_u + '_VAGRANT_PROVIDER']
        provider = ENV[pn_u + '_VAGRANT_PROVIDER']
    end

    # Explicitly set the provider variable (that Vagrant uses)
    # This ensures CLI commands like 'vagrant status' use the correct provider
    ENV['VAGRANT_DEFAULT_PROVIDER']="#{provider}"

    {% if vagrant.global.nvme_disks | length > 0 %}
    # NVME Disk parameters
        {% if vagrant.global.libvirt_cfg.enabled == True %}
            {% if vagrant.global.libvirt_cfg.nvme_disk_path[0:1] == '~' %}
    libvirt_nvme_path = ENV['HOME'] + "{{ vagrant.global.libvirt_cfg.nvme_disk_path[1:] }}"
            {% elif vagrant.global.libvirt_cfg.nvme_disk_path[0:5] == '$HOME' %}
    libvirt_nvme_path = ENV['HOME'] + "{{ vagrant.global.libvirt_cfg.nvme_disk_path[5:] }}"
            {% elif vagrant.global.libvirt_cfg.nvme_disk_path|first == '/' %}
    libvirt_nvme_path = "{{ vagrant.global.libvirt_cfg.nvme_disk_path }}"
            {% else %}
    libvirt_nvme_path = File.dirname(__FILE__) + "/" + "{{ vagrant.global.libvirt_cfg.nvme_disk_path }}"
            {% endif %}
            {% if vagrant.global.libvirt_cfg.append_project_name_to_nvme_disk_path %}
    libvirt_nvme_path = libvirt_nvme_path + "#{ pn_l }/"
            {% endif %}
    FileUtils.mkdir_p libvirt_nvme_path
        {% endif %}

        {% if vagrant.global.virtualbox_cfg.enabled == True %}
            {% if vagrant.global.virtualbox_cfg.nvme_disk_path[0:5] == '$HOME' %}
    virtualbox_nvme_path = ENV['HOME'] + "{{ vagrant.global.libvirt_cfg.nvme_disk_path[5:] }}"
            {% elif vagrant.global.virtualbox_cfg.nvme_disk_path|first == '/' %}
    virtualbox_nvme_path = "{{ vagrant.global.virtualbox_cfg.nvme_disk_path }}"
            {% else %}
    virtualbox_nvme_path = File.dirname(__FILE__) + "/" + "{{ vagrant.global.virtualbox_cfg.nvme_disk_path }}"
            {% endif %}

            {% if vagrant.global.virtualbox_cfg.append_project_name_to_nvme_disk_path %}
    virtualbox_nvme_path = virtualbox_nvme_path + "#{ pn_l }/"
            {% endif %}

    FileUtils.mkdir_p virtualbox_nvme_path
        {% endif %}
    {%- else -%}
    # No NVME Disks
    {%- endif -%}

    {%- for box in vagrant.boxes -%}
        {% if loop.index == 1 %}
    # Disable the default folder syncing.
    config.vm.synced_folder './', '/vagrant', disabled: true
        {% endif %}

        {% if vagrant.global.limit_boxes and loop.index > vagrant.global.limit_num_boxes %}
	    # Skip box {{ loop.index }} due to limit_boxes setting
        {% else %}
          {% set box_number = loop.index %}
    # Box #{{ box_number }}
    config.vm.define "{{ box.name }}" do |conf|

          {%- if vagrant.global.virtualbox_cfg.enabled == True -%}
        # For details see: https://www.vagrantup.com/docs/virtualbox/configuration.html
        conf.vm.provider :virtualbox do |vb, override|
            vb.name = "#{project_namespace}_{{ box.name }}" # name shown in Virtualbox
            vb.customize ["modifyvm", :id, "--memory", '{{ vagrant.global.memory }}' ]
            vb.customize ["modifyvm", :id, "--cpus", '{{ vagrant.global.cpus }}' ]
            vb.customize ["modifyvm", :id, "--nictype1", 'Am79C973' ]
            vb.customize ["modifyvm", :id, "--ioapic", 'on' ]
            vb.customize ["modifyvm", :id, "--rtcuseutc", 'on' ]

            {% if vagrant.global.virtualbox_cfg.enable_sse4 %}
            # Support SSE4.x
            vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
            vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]
            {% endif %}

            override.vm.box = "{{ vagrant.global.virtualbox_cfg.box }}"
            override.vm.hostname = "{{ box.name }}" # Set hostname in the OS
            override.vm.boot_timeout = {{ vagrant.global.boot_timeout }}
            {% if box.ip %}
            override.vm.network "private_network", ip: "{{ box.ip }}" {% if box.netmask %}, netmask: "{{ box.netmask }}" {% endif %}
	    {% else %}
            override.vm.network "private_network", type: "dhcp"
	    {% endif %}

            {% if box.ip2 %}
            override.vm.network "private_network", ip: "{{ box.ip2 }}" {% if box.netmask %}, netmask: "{{ box.netmask }}" {% endif %}
	    {% endif %}

            {% if vagrant.global.nvme_disks | length %}
                {% set port_count = vagrant.global.nvme_disks | length%}
		{% set host_name = box.name %}
		{% set device = 0 %}
		{% set nvme_disk_path = vagrant.global.virtualbox_cfg.nvme_disk_path %}
		{% set nvme_disk_prefix = vagrant.global.virtualbox_cfg.nvme_disk_prefix %}
		{% set nvme_disk_postfix = vagrant.global.virtualbox_cfg.nvme_disk_postfix %}
   	        {% for nvme_disk in vagrant.global.nvme_disks %}
		    {% set port = loop.index -1 %}
    		    {% set size = vagrant.global.nvme_disks[ nvme_disk ].size %}
            # /dev/nvme{{ device }}n{{ loop.index }}
            file_{{ loop.index }} = "#{virtualbox_nvme_path}" + "{{ nvme_disk_prefix }}_{{ host_name }}_{{ port }}_{{ device }}.{{ nvme_disk_postfix }}"
            unless File.exist?( file_{{ loop.index }} )
                vb.customize ["createmedium", "disk", "--filename", file_{{ loop.index }}, "--variant", "Standard", "--size", "{{ size }}", "--format", "{{ nvme_disk_postfix | upper }}"]
	            {% if loop.index == 1 %}
                # Create the controller with the first disk file
                vb.customize ["storagectl", :id, "--name", "nvme", "--add", "pcie", "--controller", "NVMe", "--portcount", "{{ port_count }}", "--bootable", "off"]
  	            {% endif %}
            end
            vb.customize ["storageattach", :id, "--storagectl", "nvme", "--type", "hdd", "--medium", file_{{ loop.index }}, "--port", {{ port }}, "--device", {{ device }}]
	        {% endfor %}
	    {% endif %}
        end # conf.vm.provider :virtualbox do |vb, override|
          {% endif %}

          {% if vagrant.global.libvirt_cfg.enabled == True %}
        # For details see: https://github.com/vagrant-libvirt/vagrant-libvirt
        conf.vm.provider :libvirt do |libvirt, override|
            {%- if vagrant.global.libvirt_cfg.box %}
            override.vm.box = "{{ vagrant.global.libvirt_cfg.box }}"
            {% endif %}
            override.vm.hostname = "{{ box.name }}" # Set hostname in the OS
            override.vm.boot_timeout = {{ vagrant.global.boot_timeout }}
            libvirt.watchdog :model => 'i6300esb', :action => 'reset'

            # This is for qemu/session
            #libvirt.storage_pool_path = File.dirname(__FILE__)
            #
            # Use QEMU session instead of system connection
            libvirt.qemu_use_session = true
            # URI of QEMU session connection, default is as below
            #libvirt.uri = 'qemu:///session'
            # URI of QEMU system connection, use to obtain IP address for management, default is below
            #libvirt.system_uri = 'qemu:///system'
            # Path to store Libvirt images for the virtual machine, default is as ~/.local/share/libvirt/images
            #libvirt.storage_pool_path = '/home/pyoung/.local/share/libvirt/images'
            # Management network device, default is below
            #libvirt.management_network_device = 'virbr0'

            libvirt.memory = {{ vagrant.global.memory }}
            libvirt.cpus = {{ vagrant.global.cpus }}
       	    libvirt.emulator_path = "{{ vagrant.global.libvirt_cfg.emulator_path }}"
            libvirt.machine_type = "{{ vagrant.global.libvirt_cfg.machine_type }}"
            libvirt.default_prefix = "#{project_namespace}"
            {%- if vagrant.global.libvirt_cfg.cdrom and vagrant.global.libvirt_cfg.cdrom.path|length > 0 %}
            libvirt.storage :file, :device => :cdrom, :path => "{{ vagrant.global.libvirt_cfg.cdrom.path }}"
            {% endif %}
            {%- if vagrant.global.libvirt_cfg.usb_passthrough and vagrant.global.libvirt_cfg.usb_passthrough.bus %}
            libvirt.usb :bus => "{{ vagrant.global.libvirt_cfg.usb_passthrough.bus }}", :device => {{ vagrant.global.libvirt_cfg.usb_passthrough.device }}
            {% endif %}

            {% if box.ip2 %}
            # Works if a public network on virbr1 existsP
            override.vm.network :public_network,
                :dev => "virbr1",
                :mode => "bridge",
                :type => "bridge"
	    {% endif %}


            # START: LIBVIRT NVME DRIVES
            {% if vagrant.global.nvme_disks | length -%}
                {% set port_count = vagrant.global.nvme_disks | length %}
                {% for key, val in vagrant.global.nvme_disks.items() %}
                    {% set port = loop.index %}
                    {% set size = val.size %}
                    {% set purpose = key %}
                    {% set port_plus = port + 1 %}
                    {% set key_id_prefix = vagrant.global.libvirt_cfg.nvme_disk_id_prefix %}
                    {% set disk_id = key_id_prefix + port|string %}
                    {% set serial_id = 'serial#' + port|string %}
                    {% set nvme_disk_postfix = vagrant.global.libvirt_cfg.nvme_disk_postfix %}
            nvme_disk_{{ box_number }}_{{ port }} = libvirt_nvme_path + "{{ box.name }}_{{ port }}.{{ nvme_disk_postfix }}"

            config.trigger.before :up do |trigger|
                unless File.exist? ( nvme_disk_{{ box_number }}_{{ port }} )
                    if provider == "libvirt"
                        cmd = "qemu-img create -f qcow2 #{ nvme_disk_{{ box_number }}_{{ port }} } {{ size }}M"
                        ok = system(cmd)
                        if ! ok
                            puts "Command failed: #{cmd}"
                            exit
                        end

                        {% if vagrant.global and
                              vagrant.global.libvirt_cfg and
                              vagrant.global.libvirt_cfg.qemu_group and
                              vagrant.global.libvirt_cfg.qemu_group|length %}
                        # If vagrant.global.libvirt_cfg.qemu_group is defined, set the NVME files to that group.
                        qemu_group = "{{ vagrant.global.libvirt_cfg.qemu_group }}"
                        cmd = "sudo chgrp -R #{ qemu_group } #{ nvme_disk_{{ box_number }}_{{ port }} }"
                        ok = system("#{cmd}")
                        if ! ok
                            puts "Command failed: #{cmd}"
                            exit
                        end
                        cmd = "sudo chmod -R g+rw #{ nvme_disk_{{ box_number }}_{{ port }} }"
                        ok = system("#{cmd}")
                        if ! ok
                            puts "command failed: #{cmd}"
                            exit
                         end
                        {% endif %}
                    end
                end
            end


            # Make disk file accessible as a device
            libvirt.qemuargs :value => "-drive"
            libvirt.qemuargs :value => "file=#{ nvme_disk_{{ box_number }}_{{ port }} },if=none,id={{ disk_id }}"
            libvirt.qemuargs :value => "-device"
            libvirt.qemuargs :value => "nvme,drive={{ disk_id }},serial={{ serial_id }}"


            {# Vagrant Triggers were added in v2.1.0 #}
            # After destroying the box, remove the file we created
            config.trigger.after :destroy do |trigger|
                trigger.info = "Destroying file #{ nvme_disk_{{ box_number }}_{{ port }} }"
                trigger.run = {inline: "rm -f #{ nvme_disk_{{ box_number }}_{{ port }} }"}
                trigger.on_error = :halt
            end

	        {% endfor %} {# for key, val in vagrant.global.nvme_disks.items() #}
	    {% endif %}	{# if vagrant.global.nvme_disks | length #}
            # END: LIBVIRT NVME DRIVES
        end # conf.vm.provider :libvirt do |libvirt, override|
          {% endif %}
    end # config.vm.define "{{ box.name }}" do |conf|
        {% endif %}

    {% endfor %}
end
