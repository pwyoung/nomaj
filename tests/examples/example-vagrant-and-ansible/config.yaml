---
# NOTES:
#   - Overrides:
#     Some features are not shown here because they're likely to be the sort
#     of thing you'd only want to override locally.
#     See overrides.yaml.BAK for details.

generic:
  # If null or "", use the git top-level directory
  project_namespace: test-example-vagrant-and-ansible

vagrant:
  boxes:
    - name: node-1
    - name: node-2
  global:
    memory: 4096
    cpus: 4
    boot_timeout: 300
    # Virtualbox only supports one NVME disk controller.
    # Implications:
    #   - Load will stress one disk controller which is not accurate
    #     (or desirable) compared to a system with two controllers.
    #   - NVME devices are named differently:
    #       Virtualbox: /dev/nvme0n1, /dev/nvme0n2, etc.
    #       libvirt:    /dev/nvme0n1, /dev/nvme1n1, etc.
    nvme_disks:
      data:
        size: 102401
      data2:
        size: 102401
    virtualbox_cfg:
      enabled: True # If not true then omit from Vagrantfile
      box: generic/ubuntu1804
      enable_sse4: true
      nvme_disk_postfix: 'vdi' # can be vdi, vmdk, vhd
      nvme_disk_path: '.vagrant/nvme_disks/' # Default to a path relative to the Vagrantfile (common for VirtualBox)
      #nvme_disk_path: '/some-absolute-path/' # May be useful
      #nvme_disk_path: '$HOME/.local/share/libvirt/images/' # Some other path in the user's home directory
      nvme_disk_prefix: 'nvme_disk'
      # If true, then append to 'nvme_disk_path' the name of the project.
      append_project_name_to_nvme_disk_path: 'true'
    libvirt_cfg:
      enabled: True # If not true then omit from Vagrantfile
      # Vagrant-Libvirt seems to require a manual step: vagrant box add <BOX> --provider=libvirt
      box: generic/ubuntu1804
      machine_type: 'q35'
      nvme_disk_postfix: 'qcow2'
      nvme_disk_id_prefix: 'drv'
      emulator_path: '/usr/bin/qemu-system-x86_64'
      nvme_disk_path: '$HOME/.local/share/libvirt/images/' # Default to something that works for QEMU://session
      # If true, then append to 'nvme_disk_path' the name of the project.
      append_project_name_to_nvme_disk_path: 'true'
      # TO ADD: to Libvirt
      #cdrom:
      #  path: "/data/downloads/win10/Win10_1903_V2_English_x64.iso"
      #usb_passthrough:
      #  bus: 3
      #  device: 10
      #boot:
      #  - "cdrom"
      #  - "hd"
      #kvm_hidden: True
      #video_type: "cirrus"
      #video_vram: 9216
      #cpu_mode: "host-model"

ansible:
  # These roles are added to build/requirements.yaml and are added
  # locally via 'ansible-galaxy'.
  roles:
    - src: https://github.com/pwyoung/ansible-role-sanity-check
      name: ansible-role-sanity-check
      scm: git
      version: 0.0.2
  # 'playbooks' specifies a list of playbooks to fetch.
  # Currently, only 'scm: git' is supported.
  # Each playbook will be cloned into build/playbooks/<entry>
  # A script, build/run-playbooks.sh will be created so that the playbooks
  # can be run manually (e.g. during development of a local role)
  # The order that the playbooks are listed below will be preserved
  # in build/run-playbooks.sh.
  playbooks:
    - src: https://github.com/pwyoung/ansible-playbook-sanity-check
      name: ansible-playbook-sanity-check
      scm: git
      version: master
      entry: playbook.yaml # Defaults to site.yml
  # Use this to create build/inventory.yml
  # Ansible Group names should not contain '-' or '.'
  inventory:
    all:
      vars:
        ansible_python_interpreter: /usr/bin/python3
      hosts:
        node-1:
        node-2:
      children:
        group_a:
          hosts:
            node-1:
            node-2:
        group_b:
          hosts:
            node-1:
        group_c:
          children:
            group_a:
            group_b:
  # Use this to create build/extra_vars.yaml
  extra_vars:
    test_msg: TEST MESSAGE FROM EXTRA_VARS
